@charset "utf-8";

// Inspired by Foundation 6.
// 
// To fully understand the following methodology, take a look at Bootstrap's _variables.scss and 
// mixins/_buttons.scss files. When you @import these files, they have "no immediate output".
// Not a single class is output to CSS before you ask it to. (...by calling @include) Now,
// look at Bootstrap's _type.scss file. The moment you @import that file it will immediately 
// start outputting CSS. Typically, you would load all of Bootstrap via @import "bootstrap" and 
// selectively comment out files you don't need. The simplicity of it is nice, but it lacks
// control and flexibility.
//  
// Instead, we split up our process into imports and then exports. First, we import all our files
// that have "no immediate output". Then, in the order of our choosing, we selectively trigger
// outputs via mixins and/or load flat files like _type.css (above). It takes a little bit more
// in terms of setup, but you gain back a ton of flexibility and control...
// - Import an entire framework (variables, mixins, etc) without exporting a single framework class
//   allowing you to write 100% semantic css if you want. (ie..news-article instead of .row)
// - Guarenteed that global variables, functions, and mixins are defined before you need them in
//   your ouput classes. It doesn't matter if they came from a framework, library, or your code.
// - Order the css output exactly the way you want it. Sometimes, this can be very important
//   to keep css specificity as low as possible.
// - Override and intervene wherever and whenever you want.
//   -- Ex: Output only a single alert-variant or btn-variant by replacing framework files with
//      	your own – while still maintaining the framework's export order.
//   -- Ex: Override a framework's mixin(s) with your own by placing your mixins before the 
//   		framework's output. As long as yours is defined last, the framework will use your
//   		mixin instead.


/// Default font stack presets. Only Google Fonts should be included in this Map. The key is 
/// intended to match the Theme Options preset dropdown values. This means that if you intend on 
/// adding more fonts to the preset list, you also need to add them to the main `config.json` file 
/// where applicable.
/// @type Map
$font-stack-presets: (
	"raleway": ("Raleway", sans-serif),
	"montserrat": ("Montserrat", sans-serif),
	"josefin_sans": ("Josefin Sans", sans-serif),
	"playfair_display": ("Playfair Display", serif),
	"arvo": ("Arvo", serif)
) !default;

// Resolves the preset dropdown and custom font fields in one place.
// Note: This function may return null, however, applying null to a variable
// is like not setting it all – allowing it to use future !defaults.
// 
// @param  {String}   $key      		The dropdown value selected in the CMS.
// @param  {String}   $custom_font      The "font" field value in the CMS.
// @return {CSS} 						The font stack to be used in any font-family:.
@function bb-get-font-stack($key, $custom_font: null){
	@if map-has-key($font-stack-presets, $key) {
		@return map-get($font-stack-presets, $key);
	}
	@else if $key == "custom" and $custom_font {
		@return $custom_font;
	}
	@else {
		@return null;
	}
}


@import "./main.imports";
@import "./main.exports";
@import "./main.overrides";
{{ theme.options.misc.additional_css }}

