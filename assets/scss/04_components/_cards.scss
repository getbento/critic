////
/// @group components-cards
/// @access public
//// 

// ============================================================================================================
// =============== CARDS : VARS ===============================================================================
// ============================================================================================================
/// At what breakpoint should `.card` elements expand? For example – when should the last card in a list of 
/// cards be horizontally centered if ther is only one?
/// 
/// **IMPORTANT:** This is not intended to be changed because `.col-md-6` is defined in the html markup. If you 
/// change this value, you will also have to change the values in the markup – which you can't do on a per-site 
/// basis. 
/// 
/// @access private
/// @type String
$card-expand-breakpoint: md !default;

/// Text color to apply to all `.card` instances.
/// @type Color
$card-color: $body-color !default;

/// Text color to apply to all `.card` instances' `:hover` state.
/// @type Color
$card-hover-color: $body-color !default;

/// Opacity to apply to all `.card__btn` instances' `:hover` state when a `.card__media` element doesn't exist 
/// (so there is no image scale effect) but you still want a "noticable" transition effect.
/// @type Number
$card-hover-no-media-opacity: 0.85 !default;

/// Margin-bottom to apply to all `.card` instances.
/// @type Number
$card-margin-bottom: 3rem !default;

/// Margin-bottom to apply to the last `.card` instance in a listing.
/// @type Number
$card-last-margin-bottom: 1rem !default;

/// Transition shorthand to apply to all `.card` instances `:hover` state.
/// @type Transition Shorthand
$card-transition: (all 0.8s cubic-bezier(0.19, 1, 0.22, 1) 0s) !default;


/// Font family stack to apply to a heading before a list of cards.
/// @type String
$card-listing-heading-font-family: null !default;

/// Font size to apply to a heading before a list of cards.
/// @type Number
$card-listing-heading-font-size: null !default;

/// Font style to apply to a heading before a list of cards. (ex: italic)
/// @type String
$card-listing-heading-font-style: null !default;

/// Text-transform to apply to a heading before a list of cards. (ex: uppercase)
/// @type String
$card-listing-heading-text-transform: null !default;

/// Margin-bottom to apply to a heading before a list of cards per breakpoint. Each key must match a key 
/// available in `$grid-breakpoints`.
/// @type Map
$card-listing-heading-margin-bottom: (
	xs: 2rem
) !default;


/// Font family stack to apply to `.card` heading instances. If set to `null`, the heading will use whichever 
/// class is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-heading-font-family: null !default;

/// Font size to apply to `.card` heading instances. If set to `null`, the heading will use whichever class
/// is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type Number
$card-heading-font-size: null !default;

/// Font style to apply to `.card` heading instances (ex: italic). If set to `null`, the heading will use 
/// whichever class is assigned to the element. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-heading-font-style: null !default;

/// Text-transform to apply to `.card` heading instances. If set to `null`, the heading will use whichever 
/// class is assigned to the element. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-heading-text-transform: null !default;

/// Margin-bottom to apply to `.card` heading instances. If set to `null`, the heading will use whichever 
/// class is assigned to the element. (ie...`.h2`, `.h3`, etc)
/// @type Number
$card-heading-margin-bottom: null !default;


/// Font family stack to apply to `.card` subheading instances. If set to `null`, the subheading will use
/// whichever class is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-subheading-font-family: $font-family-base !default;

/// Font size to apply to `.card` subheading instances. If set to `null`, the subheading will use whichever 
/// class is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type Number
$card-subheading-font-size: $font-size-base !default;

/// Font style to apply to `.card` subheading instances. (ex: italic) If set to `null`, the subheading will 
/// use whichever class is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-subheading-font-style: null !default;

/// Text-transform to apply to `.card` subheading instances. (ex: uppercase) If set to `null`, the subheading 
/// will use whichever class is assigned to the element for styling. (ie...`.h2`, `.h3`, etc)
/// @type String
$card-subheading-text-transform: null !default;

/// Margin-bottom to apply to `.card` subheading instances. If set to `null`, the subheading will use whichever 
/// class is assigned to the element. (ie...`.h2`, `.h3`, etc)
/// @type Number
$card-subheading-margin-bottom: null !default;


/// Scale to apply to `.card__image:hover`.
/// 
/// **Pro Tip: ** If you set this value to a number less than 1, it will scale down and reveal the 
/// `.card__media` background color which would allow you to create an effect that looks similar to a growing 
/// border on `:hover`.
/// 
/// @type Number
$card-image-hover-scale: 1.1 !default;


/// Defines a condensed gutter width number to be used when a card grid requires tighter gutters. Optionally, 
/// this variable can also be defined as a map – defining the gutter widths at each specified breakpoint. Each 
/// map breakpoint key must match a breakpoint key available in `$grid-breakpoints`. You do not have to include 
/// sizes at all breakpoints, however at a minimum, you should include the `xs` breakpoint size. If you include 
/// only a single gitter width, you should define this variable as a number instead. By default, this variable 
/// divides the `$grid-gutter-width` value in half. If the value is a Map, it makes and exact copy of each Map 
/// key and divides its value in half. The intention is that you get a condensed grid that is still relatively 
/// sized to the standard/default gutters. For example, "doubling up" on gutters will re-align the grid with 
/// any other elements using the standard/default gutters – like the header and footer.
/// @type Map | Number
$card-condensed-gutter-width: bb-divide-gutters($gutter: $grid-gutter-width, $divisor: 2) !default;

/// Vertical spacing to apply to elements inside `.card-content`. The intention is that elements like 
/// `.card--catering` need to be perfectly symmetrical, and this ensures we have a hard number to use and enforce.
/// @type Number
$card-content-spacer-y: $spacer !default;


/// Text-transform to apply to `.card--catering .card-content__title` elements. (ex: uppercase)
/// 
/// **Theme Option:** Catering item Styles > Uppercase Title
/// 
/// @type String
$catering-product-item-title-text-transform: null !default;

/// Background color applied to `.card--catering .card__btn` elements.
/// 
/// **Theme Option:** Catering item Styles > Background Color
/// 
/// @type Color
$catering-product-item-bg-color: null !default;

/// Border color applied to `.card--catering .card__btn` elements.
/// 
/// **Theme Option:** Catering item Styles > Stroke Color
/// 
/// @type Color
$catering-product-item-border-color: $hr-border-color !default;

/// Border width applied to `.card--catering .card__btn` elements.
/// 
/// **Theme Option:** Catering item Styles > Stroke Weight
/// 
/// @type Number
$catering-product-item-border-width: null !default;


// ============================================================================================================
// =============== CARDS : EXPORT =============================================================================
// ============================================================================================================

@mixin bb-export-classes-cards() {

	// block: header that comes immediately before a list of cards. (ie...locations, team, etc)
	// note: it may be necessary to wrap this element in a <header> so we don't have a specificity battle with
	// .content > h2.
	.card-listing-heading {
		font-family: $card-listing-heading-font-family;
		font-size: $card-listing-heading-font-size;
		font-style: $card-listing-heading-font-style;
		text-transform: $card-listing-heading-text-transform;

		// margin bottom at different breakpoints
		@if $card-listing-heading-margin-bottom {
			@each $breakpoint, $value in $card-listing-heading-margin-bottom {
				@if map-has-key($grid-breakpoints, $breakpoint) {
					@include media-breakpoint-up($breakpoint){
						margin-bottom: $value; 
					}
				}
			}
		}

		// modifier: .card-listing-heading--left
		&--left {
			text-align: left;
		}
	}

	// Get super specific to kill default padding and margins 
	// that may exist if this class is given to a <ul> element
	ul.card-listing {
		padding: 0; 
		margin-bottom: 0; 
		margin-bottom: 0;
		list-style-type: none; // target children li's 
	}
	
	// Get super specific to kill default padding and margins 
	// that may exist if this class is given to a <ul> element
	ul.card-listing {
		padding: 0;
		margin-bottom: 0;
		list-style-type: none; // target children li's 
	}	

	// block: wrap this around your cards if you want the last odd element to be centered
	.card-listing {

		// modifier: .card-listing--condensed
		// Note, some cards (ie...catering) make use of a more compact grid with tighter 
		// gutters – both externally and internally. This mis-aligns the left and right 
		// edges of a "row" with other elements using the standard gutters (header/footer). 
		// So, in these scenarios, we need to appy the same condensed gutters to the 
		// container, which has the effect of re-aligning the elements properly.
		&--condensed {
			@if $grid-gutter-width != $card-condensed-gutter-width {
				@include bb-gutters($gutter: $card-condensed-gutter-width, $divisor: 2);	
			}
		}

		// modifier: .card-listing--flex
		&--flex {

			// child
			& .card__btn {
				// psudeo child: before the flex display kicks in at the `$card-expand-breakpoint`, 
				// our `.card__btn` margin-bottom collapses and doesn't leave any spacing at the 
				// bottom of the card. By adding a pseudo-element with any height applied, it stops 
				// this collapse from happening.
				&:after {
					$flex-btn-collapser-spacer: 1px;

					@include bb-size($width: 100%, $height: $flex-btn-collapser-spacer);
					content: "";
					display: block;
					margin-bottom: ($flex-btn-collapser-spacer * -1);	
				}
			}
		}

		// breakpoint: (md) when cards initially go from stacked to side-by-side. Please 
		// note, the `$card-expand-breakpoint` variable shouldn't be touched and only 
		// exists for backwards-compatibility purposes.
		@include media-breakpoint-up($card-expand-breakpoint){

			// modifier: .card-listing--flex
			// Changes the grid layout from using standard `float` to use `flex` elements. 
			// This is currently only being used for catering cards to guarentee that their 
			// heights match on a per-row basis.
			&--flex {
				@include bb-prefix-display-flex;
				@include bb-prefix-flex-wrap($value: wrap);

				// immediate child: all cards inside a flex listing element.
				& > .card {
					@include bb-prefix-display-flex;
					float: none;

					// pseudo modifier: the last card in the list needs to normalize its 
					// `margin-bottom` – otherwise, it effects the card's height and throws 
					// off the "equal heights" intention.
					&:last-child {
						margin-bottom: $card-margin-bottom;
					}
				}

				// child: if a card is clickable, we need to ensure that the "clickable" part 
				// of the card occupies the full of the card.
				& .card__btn {
					@include bb-prefix-flex-shorthand($value: 1);
				}
			}


			// All card/column variations (2,3,4) are all "2 Columns" at this breakpoint, 
			// so if the last card is an odd number, we want to center it.
			& .card:nth-last-child(1):nth-child(odd){
				@include bb-hmargins-auto;
				float: none;
			}
		}

		// breakpoint: (lg) This is the breakpoint where card/column variations are assigned.
		@include media-breakpoint-up(lg){
			// For "3 and 4 Column" cards, we need to override the "2 Column" centering that 
			// is happening at the `md` breakpoint.
			& .card--cols-three:nth-last-child(1):nth-child(odd),
			& .card--cols-four:nth-last-child(1):nth-child(odd) {
				float: left;
			}

			// "3 Column" modifier: This selects the first column in the last row...
			& .card--cols-three:nth-last-child(-n + 3):nth-child(3n + 1) {
				
				// modifier: If it is also the last child, center it.
				&:nth-last-child(1) {
					@include bb-hmargins-auto;
					float: none;
				}

				// modifier: If it is also the second-to-last child (2 cards in the last row), 
				// add a margin-left to center the last row.
				&:nth-last-child(2) {
					@include make-col-offset(2);
				}
			}

			// "4 Column" modifier: This selects the first column in the last row...
			& .card--cols-four:nth-last-child(-n + 4):nth-child(4n + 1) {

				// modifier: If it is also the last child, center it!
				&:nth-last-child(1) {
					@include bb-hmargins-auto;
					float: none;
				}

				// modifier: If it is also the second-to-last child (2 cards in the last row), 
				// add a margin-left to center the last row.
				&:nth-last-child(2) {
					@include make-col-offset(3);
				}

				// modifier: If it is also the third-to-last child (3 cards in the last row),
				// add a margin-left to center the last row.
				&:nth-last-child(3) {
					@include make-col-offset(1.5);
				}
			}
		}
	}

	// block
	.card {
		color: $card-color;
		margin-bottom: $card-margin-bottom;

		// modifier: last card
		&:last-child {
			margin-bottom: $card-last-margin-bottom;
		}

		// element: media (image container)
		&__media {
			overflow: hidden;
			margin-bottom: $image-thumbnail-margin-bottom;
		}

		// element: image
		&__image {
			@include bb-prefix-transition($card-transition);
      margin-bottom: 0;

      // Note: The follow rules were added once we switched the thumbnail
      // treatment from a div with a background-image to an image tag. The former
      // utilized the padding-top percentage hack to create a responsive image during
      // a time when `object-fit: cover` didn't exist. The heights declared below
      // best match the new layout to the old layout, feel free to change them in 
      // additional css.

      // if objectfit is supported
      .objectfit .store-index-catering-template & img {
        object-fit: cover;
      }

      // base image styles
      // when the layout collapses to a one column grid
      // the image takes on its natural height
      .store-index-catering-template & img {
        width: 100%;
      }

      // when the grid is 2 columns
      // and the screen is wider than the mobi breakpoint
      // set the height of the image to 370px 
      .store-index-catering-template .card--cols-two & img {
        @include bb-mobi-breakpoint-up() {
          height: 370px;
        }
      }

      // when the grid is 3 columns
      // and the screen is wider than the mobi breakpoint 
      // set the height of the image to 240px
      .store-index-catering-template .card--cols-three & img {
        @include bb-mobi-breakpoint-up() {
          height: 240px;
        }        
      }

      // when the grid is 4 columns
      // and the screen is wider than the mobi breakpoint
      // set the height of the image to 175px
      .store-index-catering-template .card--cols-four & img {
        @include bb-mobi-breakpoint-up() {
          height: 175px;
        }        
      }      
		}

		// element: heading (note, any variables set to null will not output anything!)
		&__heading {
			font-family: $card-heading-font-family;
			font-size: $card-heading-font-size;
			font-style: $card-heading-font-style;
			text-transform: $card-heading-text-transform;
			margin-bottom: $card-heading-margin-bottom;
		}

		// element: subheading (note, any variables set to null will not output anything!)
		&__subheading {
			font-family: $card-subheading-font-family;
			font-size: $card-subheading-font-size;
			font-style: $card-subheading-font-style;
			text-transform: $card-subheading-text-transform;
			margin-bottom: $card-subheading-margin-bottom;
		}

		// element: button (optional)
		&__btn {
			@include bb-prefix-transition($card-transition);
			display: block;
			color: $card-color;
			text-decoration: none;
			cursor: pointer;
			
			// modifier: hover state
			&:hover {
				color: $card-hover-color;
				text-decoration: none;

				// child
				& .card__image {
					@include bb-prefix-transform(scale($card-image-hover-scale, $card-image-hover-scale));
				}
			}

			// modifier: .card__btn--no-media (when .card__media doesn't exist and we should apply a different 
			// hover effect)
			&--no-media {
				// modifier: hover state
				&:hover {
					opacity: $card-hover-no-media-opacity;
				}
			}
		}

		// block element: .card-content
		// note: currently only used for .card--catering
		&-content {
			@include clearfix;
			margin-top: $card-content-spacer-y;
			margin-bottom: $card-content-spacer-y;

			// sibling modifier: if a `.card-content` is preceeded by a `.card-media` we have to 
			// negate the image's `margin-bottom` to ensure symmetrically gutters are maintained.
			.card__media + & {
				margin-top: ($image-thumbnail-margin-bottom * -1); // TODO
				padding-top: $card-content-spacer-y;			
			}

			// element: .card-content__details (left column inside content)
			// note: only gets a right gutter
			&__details {
				@include bb-size($width: 78%);
				@include bb-gutters-as-properties(
					$properties: padding-right,
					$gutter: $card-condensed-gutter-width,
					$divisor: 2,
					$negate: false
				);
				float: left;

				// immediate last child: negate `margin-bottom` so that gutters are dictated by 
				// the parent container only.
				& > p:last-child {
					margin-bottom: 0;
				}
			}

			// element: .card-content__price (right column inside content)
			// // note: only gets a left gutter
			&__price {
				@include bb-size($width: 22%);
				@include bb-gutters-as-properties(
					$properties: padding-left,
					$gutter: $card-condensed-gutter-width,
					$divisor: 2,
					$negate: false
				);
				text-align: right;
				float: right;

				// immediate child
				& > span {
					display: block;
				}
			}

			// modifier: .card-content--boxed
			// Note, this adds gutters to the content container. This is useful when you want to add 
			// a background color to the `.card-btn` and ensure the content doesn't touch the edges.
			&--boxed {
				@include bb-gutters-as-margins($gutter: $card-condensed-gutter-width, $divisor: 2);
			}
		}

		// modifier: .card--left
		&--left {
			text-align: left;
		}

		// modifier: .card--condensed
		// Apply condensed gutters only if they are not the same as our standard (default) 
		// gutters. This simply limits the output filesize from unneccessary bloat.
		&--condensed {
			@if $grid-gutter-width != $card-condensed-gutter-width {
				@include bb-gutters($gutter: $card-condensed-gutter-width, $divisor: 2);	
			}
		}

		// modifier: .card--catering
		// special case: the catering card is the only card type that currently has specific 
		// theme options available to alter its appearance and display. For this reason, we 
		// have to create a specific modifier class to identify it.
		&--catering {
			// element and modifier
			// Note, to give the appearance of perfectly spaced cards, we also need to apply 
			// the gutters to the `margin-bottom`. However, we need to increase the specificity 
			// of the last card because its in a specificity battle with...
			// `.card-listing--flex > .card:last-child` (see above)
			&, &.card:last-child {
				@include bb-gutters-as-properties(
					$properties: margin-bottom,
					$gutter: $card-condensed-gutter-width,
					$divisor: 1,
					$negate: false
				);
			}

			// immediate child
			// Note: normally, only a `border-style` is required to display a border. However, we 
			// need separate settings for width and color, too. So, in order to keep the border for 
			// displaying unintentionally, we are ensuring that both width and color are set before 
			// setting the style.
			& > .card__btn {
				border-width: $catering-product-item-border-width;
				border-color: $catering-product-item-border-color;
				border-style: if($catering-product-item-border-width and $catering-product-item-border-color, solid, null);
				background-color: $catering-product-item-bg-color;	
			}

			// modified child
			& .card-content__title {
				text-transform: $catering-product-item-title-text-transform;
			}
		}

		// breakpoint: (md) when cards initial go from stacked to side-by-side. Please 
		// note, the `$card-expand-breakpoint` variable shouldn't be touched and only 
		// exists for backwards-compatibility purposes.
		@include media-breakpoint-up($card-expand-breakpoint){
			// modifier: the first card in every row should clear. Please note, all 
			// card/column variations are "2 Column" at this breakpoint.
			&:nth-child(2n + 1) {
				clear: left;
			}
		}

		// breakpoint: (lg) This is the breakpoint where card/column variations are assigned.
		@include media-breakpoint-up(lg){
			// modifiers: For "3 and 4 Column" cards, we need to override the "2 Column" 
			// clearing that is happening at the `md` breakpoint.
			&--cols-three:nth-child(2n + 1),
			&--cols-four:nth-child(2n + 1) {
				clear: none;
			}
			
			// modifiers: For "3 and 4 Column" cards, we need the first card in each row to
			// clear respectively.
			&--cols-three:nth-child(3n + 1),
			&--cols-four:nth-child(4n + 1) {
				clear: left;
			}
		}
	}
}