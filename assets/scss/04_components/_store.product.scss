////
/// @group components-store-product
/// @access public
////

// ============================================================================================================
// =============== STORE : VARS ===============================================================================
// ============================================================================================================
/// At what breakpoint should `.product-*` elements go from their mobile layouts to their desktop layouts? For
/// example, when should the product image browser and product details go from being stacked to displayed
/// side-by-side? Please note, this value must match a key available in `$grid-breakpoints.`
/// @type String
$store-product-expand-breakpoint: lg !default;

/// At which breakpoint should the `.product-options` elements expand from stacked to two/columns/inline?
/// Please note, this value must match a key available in `$grid-breakpoints.`
/// @type String
$store-product-options-expand-breakpoint: sm !default;

/// Generic `margin-bottom` applied to `.product-*` elements include `.product-imgbrowser` and `.product-price`.
/// @type Number
$store-product-spacer-y: 1rem !default;

/// Font-size applied to `.product-price`.
/// @type Number
$store-product-price-font-size: 1.5rem !default;

/// How many columns should the small product thumbnails take up at each breakpoint? All breakpoints are
/// options, however, you should probably include at least one so they aren't set to `width:100%` at all
/// breakpoints. Please note, the breakpoint keys must match a key available in `$grid-breakpoints`.
/// @type Map
$store-product-imgbrowser-altview-columns: (xs: 6, md: 4) !default;

/// Margin-bottom applied to the product details header. `.product-details__header`
/// @type Number
$store-product-header-spacer-y: 2rem !default;

/// Gutters applied to various `.product-imgbrowser` elements. Please note, this value is used for both
/// horizontal and vertical spacing to keep things nice and tight and consistent.
/// @type Number
$store-product-imgbrowser-gutter: bb-calc-gutter(xs) !default;

/// Font size applied to `.product-content__details` and its children.
/// @type Number
$store-product-content-details-font-size: null !default;

// ============================================================================================================
// =============== STORE : EXPORT =============================================================================
// ============================================================================================================

@mixin bb-export-classes-store-product() {
	// =============== PRIMARY COLUMNS/COMPONENTS =============================================================
	// block
	.product-content {
		@include make-col;
		@include bb-size($width: 100%);

		// element
		&__details {
			margin: ($store-product-spacer-y * 2) auto;
			font-size: $store-product-content-details-font-size;
		}

		// element
		&__datetime {
			display: block;
			margin-bottom: $store-product-spacer-y;
		}

		// breakpoint: expand
		@include media-breakpoint-up($store-product-expand-breakpoint) {
			@include make-col-span(7);
		}
	}

	// block
	.product-details {
		@include make-col;
		@include bb-size($width: 100%);
		text-align: left;

		// element
		&__header {
			margin-bottom: $store-product-header-spacer-y;
		}

		// breakpoint: expand
		@include media-breakpoint-up($store-product-expand-breakpoint) {
			@include make-col-span(5);
		}
	}

	// block
	.product-options {
		@include clearfix;
		margin-bottom: 1.5rem;

    // immediate children: columns
    & > span:not(.product-options-label),
    & > div:not(.has-icon-right),
		&.has-columns span,
		&.has-columns .numeric-stepper-wrapper {
			@include bb-size($width: 100%);
			float: left;
		}

		// immediate child
		& > span {
			padding-left: 0;
		}

		// breakpoint: padding and margin are intended to keep span perfectly inline with input in adjact column.
		@include media-breakpoint-up($store-product-options-expand-breakpoint) {
			&.has-columns span {
				@include make-col-span(8);
			}

			& > span:not(.product-options-label) {
        @include make-col-span(8);
				padding-top: 0;
				padding-bottom: 0;
				margin-top: $input-btn-border-width;
				margin-bottom: $input-btn-border-width;
      }

      & > div:not(.has-icon-right) {
        @include make-col-span(4);
      }

			&.has-columns .numeric-stepper-wrapper {
				@include make-col-span(4);
			}
		}
	}

	// block
	// TODO: Currently is not effected by form color variants.
	.product-field-message {
		display: none;

		// modifier: show it
		&--show {
			display: block;
		}

		// modifier: error
		&--error {
			color: $input-error-color;
		}
	}

	// =============== IMGBROWSER =============================================================================
	// block
	.product-imgbrowser {
		@include make-col;
		@include bb-size($width: 100%);
		margin-bottom: $store-product-spacer-y;

		// element: .product-imgbrowser__selector
		&__selector {
			@include make-row($gutter: $store-product-imgbrowser-gutter);
		}

		// element: .product-imgbrowser__altview
		&__altview {
			@include make-col($gutter: $store-product-imgbrowser-gutter);
			cursor: pointer;

			@each $breakpoint,
				$columns in $store-product-imgbrowser-altview-columns {
				@if map-has-key($grid-breakpoints, $breakpoint) {
					@include media-breakpoint-up($breakpoint) {
						@include make-col-span($columns);
					}
				}
			}
		}

		// child
		& .image-thumbnail {
			margin-bottom: $store-product-imgbrowser-gutter;
		}

		// modifier: if the imagebrowser is contained in a column
		&--nested {
			padding: 0;
			float: none;
		}

		// breakpoint: expand
		@include media-breakpoint-up($store-product-expand-breakpoint) {
			@include make-col-span(7);

			// modifier: if the imagebrowser is contained in a column
			&--nested {
				@include make-col-span(12);
			}
		}
	}

	// =============== PRODUCT PRICE ==========================================================================
	// block
	.product-price {
		display: block;
		font-size: $store-product-price-font-size;
		margin-bottom: $store-product-spacer-y;
	}

	.product-limit {
		display: block;
		margin-bottom: $store-product-spacer-y;

		// modifier: if this follows a price, negate the price's bottom margin.
		.product-price + & {
			margin-top: ($store-product-spacer-y * -1);
		}
	}
}
