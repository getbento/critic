////
/// @access public
//// 

// ============================================================================================================
// =============== IMPORTANT NOTE =============================================================================
// ============================================================================================================
// There are two very special considerations when adding a variable to this file...

// Q: Do I want the Theme Options (via the CMS) to be able to override this variable? 
// A: If yes – you MUST INCLUDE !default in the definition. If no – you MUST OMIT !default.
// 
// Q: Is it really necessary for this variable to be in the global scope?
// A: If you don't need to use a variable from different files and you also don't want a variable to be
//    overrideable via Theme Options, then you should be using local variables instead. To hide local variables,
//    you can place these variables inside functions, mixins, classes, or even our custom bb-export-classes-*
//    system.


// ============================================================================================================
// =============== GLOBAL VARS ================================================================================
// ============================================================================================================
// These variables are defined only here and used globally.

/// At what breakpoint do you want the mobile elements to transition to their expanded desktop display states?
/// Note: This has to be one of the `$grid-breakpoints` keys and **not a number value**.
/// @type String
$mobi-expand-breakpoint: md !default;

/// Alternate color to be used as the base with `use_alt_colors` options – typically in overlays and modals.
/// Note: This is defined early in the loading process so it can be used by other variable definitions 
/// throughout our scss setup.
/// @type Color
$body-alt-color: #FFFFFF !default;

/// Alternate `h1, .h1` color to be used as the base with use `use_alt_colors` options – typically in overlays
/// and modals. Note: This is defined early in the loading process so it can be used by other variable 
/// definitions throughout our scss setup.
/// @type Color
$headings-h1-alt-color: #FFFFFF !default;

/// Used for text over images and assumes overlays will use a different color than the standard body.
/// @type Color
$overlay-text-color: $body-alt-color !default;

/// Used for `h1, .h1` over images. Allows us the opportunity to differentiate from heading from 
/// `$overlay-text-color`.
/// @type Color
$overlay-h1-color: $headings-h1-alt-color !default;
// RGBA color used as an overlay to darken images.
// 

/// RGBA color used as an overlay to darken images. Please include an opacity value.
/// @type Color - RGBA
$overlay-darken-color: rgba(#000000, 0.4) !default;

// ============================================================================================================
// =============== OVERRIDE VARS ==============================================================================
// ============================================================================================================
// These variables are defined (with !defaults) in other scss variables (including Bootstrap) and are being 
// overriden here. This is usually done for one of a few reasons:
// 		1. You need to expose a variable much sooner than its !default is defined – possible because you are
// 		   using variables to define variables and the initial variable hasn't been defined yet.
// 		2. The !defaults used are actually more suitable default values. For example, the .btn-brand is
// 		   initially defined to work almost exactly the same as .btn-primary, however, .btn-brand allows you
// 		   to set :hover colors separately. (.btn-primary uses darken() to define its :hover bg color)


/// Defines a gutter width number. Optionally, this variable can also be defined as a map – defining the gutter 
/// widths at each specified breakpoint. Each map breakpoint key must match a breakpoint key available in 
/// `$grid-breakpoints`. You do not have to include sizes at all breakpoints, however at a minimum, you should 
/// include the `xs` breakpoint size. If you include only a single gitter width, you should define this 
/// variable as a number instead.
/// present.
/// @type Map | Number
/// @example scss - Defining the variable as a number.
/// 	$grid-gutter-width: 1.875rem;
$grid-gutter-width: (
	xs: 1.875rem,
	sm: 3.75rem
) !default;

/// An additional accent color that is used for most interactive elements `:hover` states by default. Adding
/// this variable allows us to achieve effects that cannot be achieved with Bootstrap components like 
/// `.btn-primary` – which simply `darken()` your `$brand-primary` color. This allows us to provide an entirely
/// different color, which is most often what we want.
/// 
/// **Theme Option:** General Style Settings > Accent Color
/// 
/// @type Color
$brand-accent: #c0392b !default;

// ============================================================================================================
// =============== PRIVATE VARS ===============================================================================
// ============================================================================================================
// IMPORTANT: Please note the lack of !default in these variables. These variables are not intended 
// (or possible) to be influenced by the CMS or theme options. They are structural dependencies of the project
// and can have unexpected results if edited. Please leave them as-is.

// resouces paths to /assets directory.
$fa-font-path: "{{ static('fonts/font-awesome') }}";
$slick-font-path: "{{ static('fonts/slick-carousel/') }}";
$slick-loader-path: "{{ static('images/slick-carousel/') }}";

// z-index: The site's structural elements require a particular z-index stacking order to display properly.
// (ie...header, mobile header, hospitality footer, modals, etc) These variables have !defaults set elsewhere,
// but it is easier to manage if we have them all in the same place.
$site-header-mobi-cart-btn-z-index: 0;
$site-header-desktop-z-index: 10;
$site-header-mobi-panel-z-index: 10;
$site-togglebtn-z-index: 20;
$site-footer-desktop-z-index: 30;
$mobi-footer-z-index: 30;
$site-header-destktop-cart-btn-z-index: 30;
$site-header-mobi-z-index: 40;
$site-notifications-z-index: 50;
$popup-z-index: 1040;

// path to /assets/images relative to /assets/scss/ directory.
$path-to-images: "{{ static('images/') }}";
