////
/// @access public
/// @group mixins-media
//// 

// ============================================================================================================
// =============== MIXINS : MEDIA =============================================================================
// ============================================================================================================

/// Take note this mixin creates styles for either a source (srcset) based gallery or fallsback to 
/// a div with background-image gallery. If $srcset_enabled (theme.options.generals.srcset_enabled) is 
/// true this will also include a fallback for browsers that don't support `object-fit: cover`.

@mixin gallery($gallery-bg-color) {
	@include bb-size($width: 100%);
	@include bb-position($position: relative, $z-index: 0);
	background-color: $gallery-bg-color;


	@if $srcset_enabled == true {
		&__item-enhancement,
		&__item-enhancement picture {
			height: 100%;
		}

		&__item-enhancement {
			// This ensures the  element has the correct positioning 
			// so we get an overlay from `.gallery__item::before`
			.gallery--dimmed & {
				position: relative;
			}

			img {
				height: 100%;
				width: 100%;
				object-fit: cover;

				// This is to win out against websties that have `.hero img` in additional css.
				// Do not delete.
				.hero & {
					width: 100%;
					max-width: initial;
        }
        
        // .popup img adds rules that conflict with ours so we cancel them out here.
        .popup & {
          margin-top: 0;
          height: 100%;
        }
			}			

			.no-objectfit & {
				display: none;
			}
		}

		&__item-fallback {
			@include bb-background-cover-base;
			@include bb-size($width: 100%, $height: 100%);
			@include bb-position($position: relative, $z-index: 0);
			overflow: hidden;

			.objectfit & {
				display: none;
			}
    }

		// modifier: .gallery--std .gallery__item
		&--std &__item {
			@include bb-gallery-item-breakpoints-variant(
				map-get($gallery-item-rules-breakpoints, std)
			);
			position: relative;

			img {
				position: absolute;
				top: 0;
				left: 0;
			}
		}    
    
    // modifier: .gallery--catering_store .gallery__item
	  &--catering_store &__item {
		  @include bb-gallery-item-breakpoints-variant(
			  map-get($gallery-item-rules-breakpoints, catering_store_srcset)
		  );
		}

		// modifier: .gallery--popup
		&--popup .gallery__item img {
			object-fit: contain;
		}


	} @else {


		// .gallery__item
		&__item {
			@include bb-background-cover-base;
			@include bb-size($width: 100%);
			@include bb-position($position: relative, $z-index: 0);
			overflow: hidden;
		}

		// element: IMPORTANT: This is only possible in a hero, so all the relevant rules, definitions, and
		// modifiers can be found in 04_components/_hero.scss
		&__content {
			// child: if you put an image inside the wysiwyg, we have to override slick setting it to a block.
			& img {
				display: inline;
			}
		}

		// modifier: .gallery--std .gallery__item
		&--std &__item {
			@include bb-gallery-item-breakpoints-variant(
				map-get($gallery-item-rules-breakpoints, std)
			);
		}

		// modifier: .gallery--catering_store .gallery__item
		&--catering_store &__item {
			@include bb-gallery-item-breakpoints-variant(
				map-get($gallery-item-rules-breakpoints, catering_store)
			);
		}

		// modifier: .gallery--popup
		&--popup .gallery__item {
			background-size: contain;
		}
	}

	
	// .gallery .arrow-btn
	& .arrow-btn {
		@include bb-position($position: absolute, $top: 50%, $z-index: 10);
		@include bb-prefix-transform(translateY(-50%));
		@include bb-gutters;
		box-sizing: content-box;

		&--left {
			@include bb-position($left: 0);
		}

		&--right {
			@include bb-position($right: 0);
		}
  }
  
	// child .gallery--catering_store .arrow-btn
	&--catering_store .arrow-btn {
		@include bb-size($width: 28px, $height: 54px);
		padding-left: $gallery-catering-store-arrow-btn-padding;
		padding-right: $gallery-catering-store-arrow-btn-padding;
	}  

	// parent modifier: adds our dimmer where it won't affect drag events. Please note, the dim modifier
	// can be applied to the gallery (affecting all items), or to each item (only effecting itself).
	&--dimmed &__item:before,
	&__item#{&}__item--dimmed:before {
		@include bb-size($width: 100%, $height: 100%);
		@include bb-position(
			$position: absolute,
			$top: 0,
			$left: 0,
			$z-index: 10
		);
		content: '';
		display: block;
		background-color: $overlay-darken-color;
	}

	// modifier: .gallery--fit .gallery__item
	// fit height to parent container
	&--fit {
		& .slick-list,
		& .slick-track,
		& .gallery__item {
			@include bb-size($height: 100%);
		}
	}

	// modifier: .gallery--full .gallery__item
	// full height gallery
	&--full &__item {
		@include bb-gallery-item-breakpoints-variant(
			map-get($gallery-item-rules-breakpoints, full)
		);
	}
	
	// modifier: .gallery--popup
	&--popup {
		background-color: transparent;

		// block and children
		&,
		& .slick-list,
		& .slick-track,
		& .gallery__item {
			@include bb-size($height: 100%);
		}

		// child
		& .slick-slide {
			@include bb-gallery-item-breakpoints-variant(
				map-get($gallery-item-rules-breakpoints, popup)
			);
		}

		// child
		& .gallery__item {
			@include bb-size($width: 100%);
		}
	}
}



/// Creates a `.gallery` variant based on the corresponding maps inside `$gallery-item-rules-breakpoints`. 
/// There are `.gallery--std, .gallery--full, .gallery--popup` galleries â€“ each with their own sizing 
/// requirements at each breakpoint, so this map allows you to put any rules inside the map directly. Per 
/// breakpoint, the key is the property you want to assign to, and the value is the value to assign. Please
/// note that each breakpoint key must exist in `$grid-breakpoints`.
/// @parameter {Map} $map - A key/value map of breakpoints and corresponding rules/values to apply to the gallery.
@mixin bb-gallery-item-breakpoints-variant($map){
	@each $breakpoint, $rules in $map {
		@if map-has-key($grid-breakpoints, $breakpoint) {
			@include media-breakpoint-up($breakpoint) {
				@each $prop, $value in $rules {
					#{$prop}: $value;
				}
			}
		}
	}	
}