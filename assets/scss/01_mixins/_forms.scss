////
/// @access public
/// @group mixins-forms
////

// ============================================================================================================
// =============== MIXINS : FORMS =============================================================================
// ============================================================================================================

/// Creates a `.form-group` variant. Form groups include either a left-aligned or right-aligned FontAwesome icon.
///
/// **Important:** FontAwesome variables are not available (yet) when the Theme Options > Bootstrap Overrides
/// Variables box is processed. If you need to use FontAwesome in that box, please use the actual FA values
/// (`"\f0f9"`) and not the variables (`$fa-var-ambulance`). However, the variables are available when the
/// Theme Options > Additional CSS box is processed. So, if you can wait, just use them there instead.
///
/// @link http://fontawesome.io/icons/ FontAwesome Icons
///
/// @parameter {String} $fa-icon [null] - The FontAwesome icon keycode or variable.
/// @parameter {String} $direction ['left'] - Which pseudo element/side we are targeting.
/// @parameter {String} $paddingAmount [null] - The amount of padding to apply.
@mixin bb-form-control-group-variant(
	$fa-icon: null,
	$direction: 'left',
	$paddingAmount: null
) {
	@if $direction == 'left' {
		// set the icon
		&:before {
			content: $fa-icon;
		}

		// make some room for the icon
		& .form-control,
		& input,
		& select {
			padding-left: if($paddingAmount, $paddingAmount, $form-group-input-padding-left)
		}
	} @else if $direction == 'right' {
		// set the icon
		&:after {
			content: $fa-icon;
		}

		// make some room for the icon
		& .form-control,
		& input,
		& select {
			padding-right: if($paddingAmount, $paddingAmount, $form-group-input-padding-right)
		}
	}
}

/// Assigns common properties for form inputs with icons - including date, time, or selects.
/// @parameter {String} $icon-font-size [$input-icon-font-size] - The font size to apply to the FontAwesome icon.
@mixin bb-form-input-icon-base($icon-font-size: $input-icon-font-size) {
	@include bb-position($position: absolute, $top: 0, $bottom: 0, $z-index: 1);
	@include bb-size($height: 1em);
	@include bb-prefix-transition($input-transition);
	font-size: $input-icon-font-size;
	line-height: 1em;
	padding: 0 $input-padding-x;
	// color: $input-icon-empty-color;
	margin: auto 0;
}

/// Creates a variant of an entire form and all its elements in one go. This is the primary
/// mixin for creating our form base styles as well as our `.form-alt` variant.
///
/// **Note:** By default an invalid input will not apply the error color to the input text. However, setting
/// `$input-use-error-color: true` changes the default behavior of all forms regardless of variant (for consistency).
///
/// @parameter {Color} $bb-form-color [null] - The base font color.
/// @parameter {Color} $bb-form-heading-color [$headings-h1-color] - The `h1, .h1` color.
/// @parameter {String} $bb-input-text-transform [$input-text-transform] - The input text-transform (uppercase, etc)
/// @parameter {Color} $bb-input-color [$input-color] - The base input color.
/// @parameter {Color} $bb-input-color-placeholder [$input-color-placeholder] - The placeholder color.
/// @parameter {Color} $bb-input-bg [$input-bg] - The base input background color.
/// @parameter {Color} $bb-input-border-color [$input-border-color] - The base input border color.
/// @parameter {Color} $bb-input-icon-color [$input-icon-color] - The base input icon color.
/// @parameter {Color} $bb-input-empty-icon-color [$input-icon-empty-color] - Input icon color when an input is empty.
/// @parameter {Color} $bb-input-empty-border-color [$input-empty-border-color] - Input border color when an input is empty.
/// @parameter {Color} $bb-input-disabled-bg [$input-bg-disabled] - Input background color when an input is disabled.
/// @parameter {Number} $bb-input-disabled-border-opacity [$input-disabled-border-opacity] - Input border opacity when an input is disabled.
/// @parameter {Color} $bb-input-error-color [$input-error-color] - The base error color used in messages and inputs.
/// @parameter {Color} $bb-input-error-border-color [$input-error-border-color] - The input border color when a required input is invalid.
@mixin bb-form-variant(
	$bb-form-color: null,
	$bb-form-heading-color: $headings-h1-color,
	$bb-input-text-transform: $input-text-transform,
	$bb-input-color: $input-color,
	$bb-input-color-placeholder: $input-color-placeholder,
	$bb-input-bg: $input-bg,
	$bb-input-border-color: $input-border-color,
	$bb-input-icon-color: $input-icon-color,
	$bb-input-empty-icon-color: $input-icon-empty-color,
	$bb-input-empty-border-color: $input-empty-border-color,
	$bb-input-disabled-bg: $input-bg-disabled,
	$bb-input-disabled-border-opacity: $input-disabled-border-opacity,
	$bb-input-error-color: $input-error-color,
	$bb-input-error-border-color: $input-error-border-color
) {
	// special case: every other element in this variant is implicitly a form element
	// (select, .form-control, etc) except for these elements immediately below (h1, color).
	// To keep specificity as low as possible this mixin runs our primary/main/default styles
	// WITHOUT a parent class namespace which is the equivalent of @root – which means the
	// ampersand symbol (&) is undefined – which will apply our h1 and color styles to the
	// root element globally, and NOT just to our forms. Because of this, we have to check
	// and add a namespace if necessary. This isn't a pretty solution, but it does keep
	// specificity as low as possible on all other form elements.
	@if & {
		color: $bb-form-color;

		& h1,
		& .h1 {
			color: $bb-form-heading-color;
		}
	} @else {
		form {
			color: $bb-form-color;

			& h1,
			& .h1 {
				color: $bb-form-heading-color;
			}
		}
	}

	& select {
		border-color: $input-border-color;
  }

	& .form-control {
		@include bb-prefix-placeholder-color(
			$color: $bb-input-color-placeholder
		);
		color: $bb-input-color;
		text-transform: $bb-input-text-transform;
		background-color: $bb-input-bg;
		border-color: $bb-input-empty-border-color;

		&:focus {
			border-color: $bb-input-border-color;
		}
  }

	& .form-error-msg {
		color: $bb-input-error-color;
	}

	& .form-control-group:before,
	& .form-control-group:after,
	& .form-control-group--icon i,
	& .AccessibleDatePicker--chevron {
		color: $bb-input-empty-icon-color;
	}

	// react button daypicker
	& .AccessibleDatePicker--button {
		color: $bb-input-empty-icon-color;
	}

	// state modifiers
	& .input--error {
    color: $bb-input-error-color;

		& .form-control:not(:focus) {
			border-color: $bb-input-error-border-color;
		}
	}

	& .input--populated {
		& .form-control {
			border-color: $bb-input-border-color;
		}

		& .form-control-group:before {
			color: $bb-input-border-color;
		}
	}

	& .input--disabled {
		display: none;
	}

	& .date--selected {

		& .AccessibleDatePicker--button {
			color: $bb-input-border-color;
		}

	}
}
