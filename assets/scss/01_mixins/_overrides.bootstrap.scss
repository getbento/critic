////
/// @access public
/// @group mixins-bootstrap-overrides
//// 

// ============================================================================================================
// =============== IMPORTANT NOTES ============================================================================
// ============================================================================================================

// We changed Bootstrap's $grid-gutter-width (which is a number) to also allow the value to be a list – where
// the list's keys match keys in $grid-breakpoints. For that to work as expected, we have to override some of
// Bootstrap's core Grid mixins to output any breakpoint media queries where applicable.
// 
// See: src/assets/scss/_gutters.scss for implementation.
// Ex: $grid-gutter-width: (
// 			xs: 1.875rem,
// 			md: 3.75rem
// );

// ============================================================================================================
// =============== MIXINS : BOOTSTRAP OVERRIDES ===============================================================
// ============================================================================================================

/// Makes a container.
/// 
/// **Workaround:** We changed Bootstrap's `$grid-gutter-width` (which is a number) to also allow the value to 
/// be a map – where the maps's keys match keys in `$grid-breakpoints. For that to work as expected, we have 
/// to override some of Bootstrap's core Grid mixins to output any breakpoint media queries where applicable.
/// 
/// **Note:** This mixin is derived from `bower_components/bootstrap/mixins/_grid.scss`
/// 
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
@mixin make-container($gutter: $grid-gutter-width) {
	margin-left: auto;
	margin-right: auto;
	// padding-left:  ($gutter / 2);
	// padding-right: ($gutter / 2);
	@include bb-gutters($gutter);
	@if not $enable-flex {
		@include clearfix();
	}
}

/// Makes a grid row.
/// 
/// **Workaround:** We changed Bootstrap's `$grid-gutter-width` (which is a number) to also allow the value to 
/// be a map – where the maps's keys match keys in `$grid-breakpoints. For that to work as expected, we have 
/// to override some of Bootstrap's core Grid mixins to output any breakpoint media queries where applicable.
/// 
/// **Note:** This mixin is derived from `bower_components/bootstrap/mixins/_grid.scss`
/// 
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
@mixin make-row($gutter: $grid-gutter-width) {
	@if $enable-flex {
		display: flex;
		flex-wrap: wrap;
	} 
	@else {
		@include clearfix();
	}
	// margin-left:  ($gutter / -2);
	// margin-right: ($gutter / -2);
	@include bb-gutters-negate($gutter);
}

/// Makes a grid column.
/// 
/// **Workaround:** We changed Bootstrap's `$grid-gutter-width` (which is a number) to also allow the value to 
/// be a map – where the maps's keys match keys in `$grid-breakpoints. For that to work as expected, we have 
/// to override some of Bootstrap's core Grid mixins to output any breakpoint media queries where applicable.
/// 
/// **Note:** This mixin is derived from `bower_components/bootstrap/mixins/_grid.scss`
/// 
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
@mixin make-col($gutter: $grid-gutter-width) {
	position: relative;
	@if not $enable-flex {
		float: left;
	}
	min-height: 1px;
	// padding-left:  ($gutter / 2);
	// padding-right: ($gutter / 2);
	@include bb-gutters($gutter);
}

/// Makes all the grid columns classes. **We don't use this anywhere, but we still need to override it for when Bootstrap
/// attempts to use it.
/// 
/// **Workaround:** We changed Bootstrap's `$grid-gutter-width` (which is a number) to also allow the value to 
/// be a map – where the maps's keys match keys in `$grid-breakpoints. For that to work as expected, we have 
/// to override some of Bootstrap's core Grid mixins to output any breakpoint media queries where applicable.
/// 
/// **Note:** This mixin is derived from `bower_components/bootstrap/mixins/_grid-framework.scss`
/// 
/// @parameter {Number} $columns [$grid-columns] - Number of columns to span. (1-12)
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Map} $breakpoints [$grid-breakpoints] - A key/value map of breakpoint sizes.
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		// padding-left: ($gutter / 2);
		// padding-right: ($gutter / 2);
		// Override: It might perform better to include this in the breakpoint loop below, and
		// instead check if the breakpoint key exists in $grid-gutter-width...maybe.
		@include bb-gutters($gutter); 
	}
	@each $breakpoint in map-keys($breakpoints) {
		@for $i from 1 through $columns {
			.col-#{$breakpoint}-#{$i} {
				@extend %grid-column;
			}
		}
		@include media-breakpoint-up($breakpoint) {
			// Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
			%grid-column-float-#{$breakpoint} {
				float: left;
			}
			@for $i from 1 through $columns {
				.col-#{$breakpoint}-#{$i} {
					@if not $enable-flex {
						@extend %grid-column-float-#{$breakpoint};
					}
					@include make-col-span($i, $columns);
				}
			}
			@each $modifier in (pull, push, offset) {
				@for $i from 0 through $columns {
					.col-#{$breakpoint}-#{$modifier}-#{$i} {
						@include make-col-modifier($modifier, $i, $columns)
					}
				}
			}
		}
	}
}
