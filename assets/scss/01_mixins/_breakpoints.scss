////
/// @access public
/// @group mixins-breakpoints
//// 

// ============================================================================================================
// =============== IMPORTANT NOTES ============================================================================
// ============================================================================================================

// Shortcuts: Intended to provide one usage for identifying the mobi-expand breakpoint.
// Note: Bootstrap's $grid-breakpoints logic is good, but not suitable for our purpose here.
// Because BS expects its keys/breakpoints to be in ascending order, we couldn't set our
// mobile breakpoint independently – it would have to be in the context of the BS object.

// TODO: These probably need to account for landscape phones.

// ============================================================================================================
// =============== MIXINS : BREAKPOINTS =======================================================================
// ============================================================================================================

/// Shortcut to create a media query at the `$mobi-expand-breakpoint` and up. This is useful because it allows 
/// us to change the breakpoint later and not do a giant find-and-replace to keep all of our elements in sync. 
/// **Please use this wherever applicable and whenever possible**.
/// @content Any scss to be included at the mobile breakpoint and up.
@mixin bb-mobi-breakpoint-up(){
	@include media-breakpoint-up($mobi-expand-breakpoint){
		@content;
	}
}

/// Shortcut to create a media query at the `$mobi-expand-breakpoint` and down.
/// 
/// **Workaround:** Bootstrap's `breakpoint-down()` mixin finds the next highest breakpoint instead of using
///  **this** exact `(breakpoint - 1px)`...which isn't what we want. So, we use our business logic instead.
/// 
/// @content Any scss to be included at the mobile breakpoint and down.
@mixin bb-mobi-breakpoint-down(){
	$val: map-get($grid-breakpoints, $mobi-expand-breakpoint);
	@media (max-width: ($val - 1px)) {
		@content;
	}
}

/// Shortcut to create a media query at between the `$mobi-expand-breakpoint` minimum and maximum width. Uses 
/// Bootstrap's `media-breakpoint-only()` mixin.
/// @content Any scss to be included between the minimum and maximum mobile breakpoint values.
@mixin bb-mobi-breakpoint-only(){
	@include media-breakpoint-only($mobi-expand-breakpoint) {
		@content;
	}	
}

/// Accepts a number of a breakpoint key to create a `min-width` media query. This is intended to be used with 
/// things like headers and footers – where the number/size of items will vary from site to site and you may 
/// need to add an extra breakpoint just for these items.
/// @parameter {Number | String} $value - A number, or a breakpoint key that is available in the `$breakpoints` map parameter.
/// @parameter {Map} $breakpoints [$grid-breakpoints] - A key/value map of breakpoint and breakpoint max-widths.
/// @content Any scss to be included at the specified breakpoint and up.
@mixin bb-breakpoint-up($value, $breakpoints: $grid-breakpoints) {
	@if type-of($value) == "string" {
		@if map-has-key($breakpoints, $value){
			@include media-breakpoint-up($value, $breakpoints: $breakpoints){
				@content;
			}
		}
	}

	@if type-of($value) == "number" {
		@media (min-width: $value) {
			@content;
		} 
	}
}