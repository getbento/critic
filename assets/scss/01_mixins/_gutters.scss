////
/// @access public
/// @group mixins-gutters
//// 

// ============================================================================================================
// =============== MIXINS : GUTTERS ===========================================================================
// ============================================================================================================

/// Outputs `padding-left, padding-right` rules for all defined breakpoints. Typically, gutters are the sum of 
/// the touching left/right padding from two touching columns. So, by default, we divide the result in half using
/// the `$divisor` parameter to give the expected value.
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
@mixin bb-gutters($gutter: $grid-gutter-width, $divisor: 2) {
	@include -bb-gutters-abstract($gutter: $gutter, $divisor: $divisor, $negate: false);
}

/// Outputs `margin-left, margin-right` rules for all defined breakpoints which are always negative numbers. 
/// (padding-left X -1 = margin-left) Typically, gutters are the sum of the touching left/right padding from two 
/// touching columns. So, by default, we divide the result in half using the `$divisor` parameter to give the 
/// expected value. 
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
@mixin bb-gutters-negate($gutter: $grid-gutter-width, $divisor: 2) {
	@include -bb-gutters-abstract($gutter: $gutter, $divisor: $divisor, $negate: true);
}

/// Outputs positive `margin-left, margin-right` rules for all defined breakpoints. Usually, positive values are 
/// applied to padding, however, we are tricking the `-bb-gutters-abstract` mixin by providing a negative 
/// `$divisor` value. This will then be negated back into a position number.
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
@mixin bb-gutters-as-margins($gutter: $grid-gutter-width, $divisor: 2) {
	$invert-divisor: ($divisor * -1);
	@include -bb-gutters-abstract($gutter: $gutter, $divisor: $invert-divisor, $negate: true);
};

/// Outputs gutter values applied to all rules provided to the `$properties` list parameter for all defined 
/// breakpoints. Typically, gutters are the sum of the touching left/right padding from two touching columns. 
/// So, by default, we divide the result in half using the `$divisor` parameter to give the expected value. Also, 
/// usually postive values are applied to padding and negative values are applied to margins. However, with 
/// this mixin, you can accomplish just about any combination of output that you wish.
/// 
/// **Note:** This mixin is a direct pass-through to the private `-bb-gutters-abstract-properties()` mixin. This 
/// mixin's only purpose is to give you access to a public mixin instead of attempting to use the private mixin 
/// directly.
/// 
/// @parameter {List} $properties [()] - A list of all the properties that the gutter value should be applied. (ie...padding-left padding-right)
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
/// @parameter {Bool} $negate [false] - `false` outputs `padding`. `true` outputs `margins`.
@mixin bb-gutters-as-properties($properties: (), $gutter: $grid-gutter-width, $divisor: 2, $negate: false) {
	@include -bb-gutters-abstract-properties(
		$properties: $properties,
		$gutter: $gutter,
		$divisor: $divisor,
		$negate: $negate
	);
}

// ============================================================================================================
// =============== PRIVATE: DO NOT USE DIRECTLY! ==============================================================
// ============================================================================================================

/// This is an abstract mixin used by the gutter mixins to avoid repetition outputting margins and padding. 
/// Please note, this mixin will apply the gutter value(s) equally to both left and right properties.
/// Based on the `$negate` parameter, this mixin will decide whether it should output `padding` which is 
/// generally a positive number, or `margin` which is generally a negative number. Please note, this mixin uses
/// the `-bb-gutters-abstract-properties()` mixin to create the final output.
/// 
/// **Note:** Although you can use this method directly, you shouldn't really have a reason to. You should 
/// attempt to use the other gutter mixins before resorting to using this one directly.
/// 
/// @access private
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
/// @parameter {Bool} $negate [false] - `false` outputs `padding`. `true` outputs `margins`.
@mixin -bb-gutters-abstract($gutter: $grid-gutter-width, $divisor: 2, $negate: false) {
	$prop: if($negate, margin, padding);

	@include -bb-gutters-abstract-properties(
		$properties: #{$prop}-left #{$prop}-right,
		$gutter: $gutter,
		$divisor: $divisor,
		$negate: $negate
	);
}

/// This is an abstract mixin used by the gutter mixins to avoid repetition outputting gutter values to 
/// individual properties. It will apply the gutter value to every property in the `$properties` list. 
/// Based on the `$negate` parameter, this mixin will decide whether it should output apply a value as a 
/// positive or negative number.
/// 
/// **Note:** Although you can use this method directly, you shouldn't really have a reason to. You should 
/// attempt to use the other gutter mixins before resorting to using this one directly.
/// 
/// @access private
/// @parameter {List} $properties [()] - A list of all the properties that the gutter value should be applied. (ie...padding-left padding-right)
/// @parameter {Number | Map} $gutter [$grid-gutter-width] - If using a map, the keys must match a `$grid-breakpoints` key.
/// @parameter {Number} $divisor [2] - Most of the time, you want half a gutter, so we divide by 2.
/// @parameter {Bool} $negate [false] - `false` outputs `padding`. `true` outputs `margins`.
@mixin -bb-gutters-abstract-properties($properties: (), $gutter: $grid-gutter-width, $divisor: 2, $negate: false) {
	$multiplier: if($negate, -1, 1);
	$vartype: type-of($gutter);

	// if its a number, we don't have to worry about breakpoints.
	@if $vartype == "number" {
		@each $prop in $properties {
			#{$prop}: (($gutter / $divisor) * $multiplier);
		}
	}
	// if its not a number, we need to output all the gutter breakpoints that are defined
	@else {
		@each $breakpoint, $gutter-width in $gutter {
			// need to make sure our gutter breakpoint exists in our grid-breakpoints
			@if map-has-key($grid-breakpoints, $breakpoint) {
				// note: BS is smart enough to not create a breakpoint when its set 
				// to zero. (ie.. xs: 0)
				@include media-breakpoint-up($breakpoint) {
					@each $prop in $properties {
						#{$prop}: (($gutter-width / $divisor) * $multiplier);
					}
				}	
			}
		}
	}
}


