////
/// @access public
/// @group mixins-layouts
//// 

// ============================================================================================================
// =============== MIXINS : LAYOUTS ===========================================================================
// ============================================================================================================

/// Shortcut to outputting all *dimensional* properties quickly and easily. If an parameter values are `null`, the
/// corresponding property will not be exported. If you need properties to be exported in a particular order, you can 
/// use this `bb-size()` mixin with a single property at a time, or just write out the properties yourself.
/// @parameter {Number} $width [null] - A number to apply to `width`.
/// @parameter {Number} $min-width [null] - A number to apply to `min-width`.
/// @parameter {Number} $max-width [null] - A number to apply to `max-width`.
/// @parameter {Number} $height [null] - A number to apply to `height`.
/// @parameter {Number} $min-height [null] - A number to apply to `min-height`.
/// @parameter {Number} $max-height [null] - A number to apply to `max-height`.
@mixin bb-size($width: null, $min-width: null, $max-width: null, $height: null, $min-height: null, $max-height: null) {
	width: $width;
	min-width: $min-width;
	max-width: $max-width;
	height: $height;
	min-height: $min-height;
	max-height: $max-height;
}

/// Shortcut to outputting all *positional* properties quickly and easily. If an parameter values are `null`, the
/// corresponding property will not be exported.
/// @parameter {String} $position [null] - Applied to `position`. (relative, absolute, etc)
/// @parameter {Number} $top [null] - Applied to `top`. (100%, 0, etc)
/// @parameter {Number} $right [null] - Applied to `right`. (100%, 0, etc)
/// @parameter {Number} $bottom [null] - Applied to `bottom`. (100%, 0, etc)
/// @parameter {Number} $left [null] - Applied to `left`. (100%, 0, etc)
/// @parameter {Number} $z-index [null] - Applied to `z-index`.
@mixin bb-position($position: null, $top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
	position: $position;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $z-index;
}

/// Shortcut to outputting horizontal auto margins for centering a *defined-width* element within its container.
@mixin bb-hmargins-auto() {
	margin-left: auto;
	margin-right: auto;
}

/// Ouputs all `$site-is-boxed` width-related rules per breakpoint. The intended purpose of this mixin is to be able to 
/// apply the same exact rules/breakpoints to all elements that would be effected by the `$site-is-boxed` variable â€“ 
/// fixed headers, footers, main content area, etc.
/// @parameter {Map} $container-widths [$site-container-widths] - A key/value map of breakpoint and breakpoint width/max-widths.
@mixin bb-site-boxed-widths($container-widths: $site-container-widths) {
	@if $site-is-boxed {
		@at-root {
			& {
				@include bb-size($max-width: $site-boxed-max-width);

				@each $breakpoint, $rules in $container-widths {
					@if map-has-key($grid-breakpoints, $breakpoint) {
						@include media-breakpoint-up($breakpoint) {
							@each $prop, $value in $rules {
								#{$prop}: $value;
							}
						}
					}
				}
			}
		}
	}
}
