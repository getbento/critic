////
/// @access public
/// @group mixins-buttons
////

// ============================================================================================================
// =============== MIXINS : BUTTONS ===========================================================================
// ============================================================================================================

// We need a way to alter the color of anchors without assigning a direct class so that
// user-generated content is styled intelligently.
//
/// Creates an achor `<a>` variant when the element is not a `.btn` instance. This allows us a way to alter the
/// color of anchors without assigning a direct class so that user-generated content is styled intelligently.
/// Please note, if the link color will be the same as the surrounding content color, you should consider using
/// the `$text-transform: underline` to make sure any anchors stand out.
/// **This method is intended to only ever be run once.**
/// @access private
/// @parameter {Color} $color [$link-alt-color] - The initial color of the anchor.
/// @parameter {String} $active-color [$link-alt-active-color] - The `:hover` color of the anchor.
/// @parameter {String} $text-decoration [null] - Should really ever only be `underline` or `null`.
@mixin bb-anchor-variant($color: $link-alt-color, $active-color: $link-alt-active-color, $text-decoration: null) {
  & a:not(.btn) {
    color: $color;
    text-decoration: $text-decoration;

    @include hover-focus {
      color: $active-color;
    }
  }
}

/// **Workaround:** Bootstrap doesn't allow us to change the hover color of a button easily as all of
/// Bootstrap's button mixins just `darken()` the background color on hover. So, instead, this mixin
/// allows us a way to make our own button variants. If any of the parameter values are `null`, the
/// corresponding properties won't be output.
///
/// **Note:** Most of this mixin is copied from `/bower_components/bootstrap/scss/mixins/_buttons.scss`
///
/// @parameter {Color} $color - The initial text color.
/// @parameter {Color} $background - The initial background color.
/// @parameter {Color} $border - The initial border color.
/// @parameter {Color} $active-color - The `:hover` text color.
/// @parameter {Color} $active-background - The `:hover` background color.
/// @parameter {Color} $active-border - The `:hover` border color.
@mixin bb-button-variant($color, $background, $border, $active-color, $active-background, $active-border) {
  color: $color;
  background-color: $background;
  border-color: $border;
  @include box-shadow(inset 0 1px 0 rgba(255,255,255,.15), 0 1px 1px rgba(0,0,0,.075));

  @include hover {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;
    // outline: 0;
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;
    // Remove the gradient for the pressed/active state
    background-image: none;
    @include box-shadow(inset 0 3px 5px rgba(0,0,0,.125));

    &:hover,
    &:focus,
    &.focus {
      color: $active-color;
      background-color: darken($active-background, 5%);
      border-color: if($active-border, darken($active-border, 5%), null);
      // outline: 0;
    }
  }

  &.disabled,
  &:disabled {
    &:focus,
    &.focus {
      background-color: $background;
      border-color: $border;
      // outline: 0;
    }
    @include hover {
      background-color: $background;
      border-color: $border;
    }
  }
}

/// **Workaround:** Surprisingly, Bootstrap doesn't have a `button-base()` mixin and we don't always want to
/// have to add the `.btn` class. So, we've copied their code and made our own mixin with a few modifications
/// to make it a little more dynamic.
///
/// **Note:** Most of this mixin is copied from `/bower_components/bootstrap/scss/_buttons.scss`
///
/// @parameter {String} $bb-btn-font-weight [$btn-font-weight] - The button font weight (bold, 500, etc)
/// @parameter {Number} $bb-input-btn-border-width [$input-btn-border-width] - The button border width (1px, etc)
/// @parameter {Number} $bb-btn-padding-y [$btn-padding-y] - The vertical padding. Usually an EM unit.
/// @parameter {Number} $bb-btn-padding-x [$btn-padding-x] - The horizontal padding. Usually an EM unit.
/// @parameter {Number} $bb-font-size-base [$font-size-base] - The button font size. Usually an REM unit.
/// @parameter {Number} $bb-line-height [$line-height] - The button line-height. Usually unitless or EM units.
/// @parameter {Number} $bb-btn-border-radius [$btn-border-radius] - The button border radius. Usually a PX unit.
/// @parameter {String} $bb-cursor-disabled [$cursor-disabled] - The browser-icon to show when disbaled. (not-allowed, pointer, etc)
@mixin bb-button-base(
        $bb-btn-font-weight: $btn-font-weight,
        $bb-input-btn-border-width: $input-btn-border-width,
        $bb-btn-padding-y: $btn-padding-y,
        $bb-btn-padding-x: $btn-padding-x,
        $bb-font-size-base: $font-size-base,
        $bb-line-height: $line-height,
        $bb-btn-border-radius: $btn-border-radius,
        $bb-cursor-disabled: $cursor-disabled
    ) {
  display: inline-block;
  font-weight: $bb-btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  @include bb-prefix-user-select(none);
  border: $bb-input-btn-border-width solid transparent;
  @include button-size($bb-btn-padding-y, $bb-btn-padding-x,  $bb-font-size-base, $bb-line-height, $bb-btn-border-radius);
  @include bb-prefix-transition(all $btn-transition-duration $btn-transition-ease 0s);

  &,
  &:active,
  &.active {
    &:focus,
    &.focus {
      // @include tab-focus();
      // outline: 0;
    }
  }

  @include hover-focus {
    text-decoration: none;
  }

  &.focus {
    text-decoration: none;
  }

  &:active,
  &.active {
    background-image: none;
    outline: 0;
    @include box-shadow(inset 0 3px 5px rgba(0,0,0,.125));
  }

  &.disabled,
  &:disabled {
    cursor: $bb-cursor-disabled;
    opacity: 0.65;
    @include box-shadow(none);
  }
}

/// Creates an arrow button variant that is generally used in slideshows or heros' *scroll to next* buttons. Any parameters
/// that have a `null` values will not output anything.
///
/// **Important:** Arrow buttons is specifically intended to be an SVG data uri. Please do not try to use any other type of
/// image format.
///
/// @parameter {Number} $bb-width [null] - The width of the arrow button. Usually in PX units.
/// @parameter {Number} $bb-height [null] - The height of the arrow button. Usually in PX units.
/// @parameter {String} $bb-icon [null] - The SVG data uri. Generally defined in `/03_elements/_button.scss`.
/// @parameter {Color} $bb-color [$arrow-btn-color-hex] - The hex color to apply to the initial arrow button state.
/// @parameter {Color} $bb-active-color [$arrow-btn-active-color-hex] - The hex color to apply to the `:hover` arrow button state.
@mixin bb-arrow-btn-variant(
      $bb-width: null,
      $bb-height: null,
      $bb-icon: null,
      $bb-color: $arrow-btn-color-hex,
      $bb-active-color: $arrow-btn-active-color-hex
    ) {
  @include bb-size($width: $bb-width, $height: $bb-height);

  // pseudo child: icon
  &:before {
    background-image: url(bb-arrow-data-uri($bb-icon, $bb-color));
  }

  @if ($bb-active-color and $bb-active-color != $bb-color) {
    &:hover:before {
      background-image: url(bb-arrow-data-url($bb-icon, $bb-active-color));
    }
  }
}
